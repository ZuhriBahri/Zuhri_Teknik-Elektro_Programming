// NAMA		: Zuhri Muhammad Bahri
// NRP		: 5022221022
// Jurusan	: Teknik Elektro

#include <iostream>
#include <cmath>

#define GRAVITASI 10 //10 m/s^2
#define START_PENGUKURAN 1 //pengukuran dimulai dari 1 meter
#define SUDUT 45 //sudut elevasi tembakan
#define PI 3.14159265 //Nilai PI

//jarak = v0^2 x sin 2 SUDUT / GRAVITASI
//v0^2  = jarak x GRAVITASI / sin 2 SUDUT

unsigned short mencari_v0(unsigned short vmax, unsigned short loss)
{
	/* Tulis fungsi mencari v0 kalian disini */
  	return vmax - loss;
}

unsigned short speed_dgn_loss(unsigned short vmax)
{
	/* tulis fungsi hitung_loss kalian disini */
    // jika vmax 1  s.d. 10 loss = 1m/s
    // jika vmax 11 s.d. 20 loss = 3m/s
    // jika vmax 21 s.d. 30 loss = 5m/s
    unsigned short loss;
    if (vmax>=1 && vmax<=10){
        loss = 1;
    }else if (vmax>=11 && vmax<=20){
        loss = 3;
    }else if (vmax>=21 && vmax<=30){
        loss = 5;
    }
    return loss;
}

float mencari_vtangensial(unsigned short jarak, unsigned short loss)
{
    /*fungsi mencari vtangensial*/
  	return sqrt(jarak*GRAVITASI/sin(2*SUDUT*PI/180)) + loss ;
}


int main() {
    /* tulis kode utama kalian disini */
    // Variabel yang digunakan
        float jarak, kecepatan_tangensial;
        unsigned short v0,vmax,loss;

  	/* input adalah kecepatan tangensial maksimum roller */
  	std::cin >> vmax;
        /* Mencari v0 dengan mencari loss terlebih dahulu*/
        loss = speed_dgn_loss(vmax);
        v0 = mencari_v0(vmax,loss);
        
    /*Mencari jarak*/
    jarak = pow(v0,2)*sin (2*SUDUT*PI/180)/GRAVITASI;
        /*Membulatkan jarak dan sekalian dikurangkan karena jarak dimulai
          dari START_PENGUKURAN atau 1 tidak dari 0*/
        unsigned short jarak_bulat = (unsigned short)jarak;
            if(jarak-jarak_bulat-0.5<0){
            jarak_bulat = jarak_bulat  - START_PENGUKURAN;
            }else if(jarak-jarak_bulat-0.5>=0){
            jarak_bulat = jarak_bulat + 1 - START_PENGUKURAN;
            }

    /*mencari vtangensial*/
    kecepatan_tangensial = mencari_vtangensial(jarak_bulat,loss);
    /*Output berupa jarak bilangan bulat dan vtangensial bilangan desimal*/
  	std::cout << jarak_bulat << " " << kecepatan_tangensial << std::endl; 
    return 0;
}
